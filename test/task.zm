/******************************************************************************\
FILE:           task.zm
AUTHOR:         Theo Veenker <theo.veenker@beexy.nl>
ADAPTED BY:     -

DESCRIPTION:

Auditory Lexical Decision


Global structure of this experiment phase:

  - instructions

  - practice part
      trial

  - pause

  - test part
      trial


HISTORY:
2011-10-25 TV   Created.
2017-01-09 TV   Adapted for Zep 2.0.

\******************************************************************************/

//requires 2.4;

import defs;
import stimuli;
import output;
import test_page;
import instructions;


Block task
{
    Response resp
    {
        on_event:message()
        {
            process_hit(message_arg, event_time);
        }

        void process_hit(int val, time t)
        {
            HitType h = hit(t);
            if (h == HIT_VALID) {
                set_sleep_state(cast<SleepState>(val));
                if (val == AWAKE) {
                    control.set_sleeping(false);
                }
                else {
                    control.set_sleeping(true);
                }
            }
        }
    }

    void setup()
    {
        control.target = resp;
        control.disable_buttons();
        control.enable_button(0, SLEEPING);
        control.enable_button(2, AWAKE);
        control.disable_keys();
        control.enable_key(KEY_Shift_L, SLEEPING);
        control.enable_key(KEY_Shift_R, AWAKE);
        resp.start(now(), 0ms);
    }

    cleanup()
    {
        control.target = null;
        control.disable_buttons();
        control.disable_keys();
    }

    Part instructions
    {
        on_event:entry()
        {
//            pause_page.set_text_size(1000, 600);
            pause_page.set_text(PRAC_INSTRUCTION, true);

            pause_page.action(this);
            control.enable_all_buttons(1);
        }
    }


    Block practice
    {
        TestItem[]        item_block;   // current items
        int n;

        on_event:entry()
        {
            prepare_prac_items();
            num_cycles = prac_items.size;
            // Prepare test page: progress bar, feedback and prompt enabled.
            test_page.setup(num_cycles, false, false);

            task.setup();
        }

        on_event:exit()
        {
            test_page.cleanup();
        }

        Block practice_tones
        {
            TestItem item;

            on_event:entry()
            {
                item_block = prac_items[practice.cycle];
                num_cycles = item_block.size;
            }

            Trial trial
            {
                on_event:entry()
                {
                    item = prac_items[practice.cycle][practice_tones.cycle];
                    test_page.action(this, item, reference_time, practice.cycle);
                    n++;
                }

                on_event:exit()
                {
                    TestOutput output;
                    output.stim_num = n;
                    output.id       = item.id;
                    output.type     = item.type;
                    output.fn       = item.fn;
                    output.marker   = item.marker;

                    prac_output_append(output);
                }
            }
        }
    }


    Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms);
        }
    }


    Part pause
    {
        on_event:entry()
        {
            pause_page.set_text(TEST_INSTRUCTION, true);

            pause_page.action(this);
            control.enable_all_buttons();
        }
    }

    Block test
    {
        TestItem[]        item_block;   // current items
        int n;


        on_event:entry()
        {
            prepare_test_items();
            num_cycles = test_items.size;
            // Prepare test page: progress bar, feedback and prompt enabled.
            test_page.setup(-1, false, false);

            task.setup();
        }


        on_event:exit()
        {
            test_page.cleanup();
        }

        Block test_tones
        {
            TestItem item;

            on_event:entry()
            {
                item_block = test_items[test.cycle];
                num_cycles = item_block.size;
            }

            Trial trial
            {
                on_event:entry()
                {
                    item = test_items[test.cycle][test_tones.cycle];
                    test_page.action(this, item, reference_time, test.cycle);
                    n++;
                }

                on_event:exit()
                {
                    TestOutput output;
                    output.stim_num = n;
                    output.id       = item.id;
                    output.type     = item.type;
                    output.fn       = item.fn;
                    output.marker   = item.marker;

                    test_output_append(output);
                }
            }
        }
    }


    Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms);
        }
    }
}


void action(Part caller)
{
    // Activate the task. When the task is done, the registered caller
    // (c.q. the main experiment object) will automatically be signalled.
    task.enter(caller);
}

